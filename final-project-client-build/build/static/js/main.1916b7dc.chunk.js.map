{"version":3,"sources":["logo.svg","Components/task.js","Components/store.js","Components/dashboard.js","Components/responsiveDrawer.js","serviceWorker.js","Components/chat.js","Components/mainWindow.js","Components/chartBar.js","Components/composed-chart.js","Routers/routers.js","index.js"],"names":["module","exports","queryRes","React","createContext","useStyles","makeStyles","theme","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","Active","backgroundColor","float","Complete","navLinks","textDecorationLine","list","width","maxWidth","palette","background","paper","OutlinedCard","props","allTasks","classes","Provider","List","className","map","task","i","ListItem","dense","key","exact","to","taskID","Card","variant","CardContent","Typography","component","color","datesend","slice","Chip","status","label","CardActions","Button","size","socket","CTX","sendChatAction","value","emit","message","from","currTask","Store","tasks","useState","chats","setChats","toTask","setToTask","useEffect","a","async","currTaskId","window","location","pathname","split","find","undefined","console","log","chat","getCurrTask","io","on","prevChats","user","children","root","padding","spacing","flex","alignItems","topicWindow","height","borderRight","chatWindow","chatBox","button","Dashboard","useContext","textValue","changeTextValue","Paper","style","gutterBottom","paddingLeft","TextField","helperText","onChange","e","target","onClick","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","flexGrow","ResponsiveDrawer","container","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","Divider","text","index","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","ModalProps","keepMounted","xsDown","paragraph","Boolean","hostname","match","res","chatStyle","Chat","data","year","population","name","uv","pv","amt","Example","top","right","bottom","left","dataKey","barSize","fill","type","stroke","PureComponent","MainWindow","allUsersTasks","setAllUsersTasks","fetch","then","json","Grid","item","xs","path","ReactRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1916b7dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport { get } from 'mongoose';\r\nimport { Chip, List, ListItem } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\nexport let queryRes = React.createContext();\r\nlet res ;\r\n\r\n\r\n\r\n// the show the user only y/m/d\r\nfunction formatDate(date) {\r\n    date = date.slice(0, 10);\r\n    return date;\r\n\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        minWidth: 275,\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    Active: {\r\n        backgroundColor: '#ffca28',\r\n        float: \"right\",\r\n        marginBottom: \"8px\"\r\n    },\r\n    Complete: {\r\n        backgroundColor: '#66bb6a',\r\n        float: \"right\",\r\n        marginBottom: \"8px\"\r\n\r\n    },\r\n    navLinks: {\r\n        textDecorationLine: 'none',\r\n        // padding: 20\r\n    },\r\n    list: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport default function OutlinedCard(props) {\r\n\r\nconst {\r\n    allTasks\r\n} = props;\r\n\r\n    const classes = useStyles();\r\n    // here we have to send the userID and create cards for each one\r\n\r\n    return (\r\n        <queryRes.Provider >\r\n                {/* {console.log('res inside TASK\\n',res) */}\r\n                \r\n\r\n            <List className={classes.list}>\r\n\r\n                {\r\n                    allTasks.map((task, i) => (\r\n                        <ListItem dense=\"true\" key={i}>\r\n\r\n                            <NavLink exact to={\"/chat/\" + task.taskID} className={classes.navLinks}>\r\n\r\n                                <Card className={classes.card} variant=\"outlined\" key={i}>\r\n\r\n                                    <CardContent>\r\n\r\n                                        <Typography variant=\"h5\" component=\"h2\">\r\n                                            {task.title}\r\n\r\n                                        </Typography>\r\n                                        <Typography className={classes.pos} color=\"textSecondary\">\r\n                                            Due date: {formatDate(task.datesend)}\r\n                                        </Typography>\r\n                                        <Chip className={task.status === \"Active\" ? classes.Active : classes.Complete} label={task.status} />\r\n\r\n\r\n\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                            <Button size=\"small\">Learn More</Button>\r\n                        </CardActions>\r\n                                </Card>\r\n                            </NavLink>\r\n\r\n                        </ListItem>\r\n                    ))\r\n\r\n\r\n                }\r\n            </List>\r\n\r\n        </queryRes.Provider>\r\n\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport io from \"socket.io-client\"\r\nimport { queryRes } from \"./task\";\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n\r\nexport const CTX = React.createContext();\r\nlet socket;\r\n\r\n\r\n\r\n\r\n\r\nfunction sendChatAction(value) {\r\n    socket.emit('chat message', value.message, value.from);\r\n\r\n}\r\n\r\n\r\n\r\n// need to bring the name if the sender... \r\nlet user = \"Tomer Bar\"\r\nlet currTask;\r\n\r\n\r\nexport default function Store(props) {\r\n\r\n    const { tasks } = props;\r\n\r\n    // const resultt = React.useContext(queryRes);\r\n\r\n    const [chats, setChats] = React.useState([]);\r\n    const [toTask, setToTask] = React.useState(false);\r\n    // const [task, setTask] = React.useState();\r\n    // const [redirect, setRedirect] = React.useState(false)\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        async function getCurrTask() {\r\n\r\n            // taking the index of the chat the user click on\r\n            let currTaskId = window.location.pathname.split(\"/\")[2];\r\n\r\n\r\n            currTask = await tasks.find(task => {\r\n                if (currTaskId == task.taskID)\r\n                    return task;\r\n            });\r\n\r\n            // in cases we didn't pass tasks be4 rendering this component, we will redirect to mainWindow and then currTask will get value\r\n            if (currTask !== undefined) {\r\n                // we send to server the current task of the chat, to update the chat when user disconnected\r\n                socket.emit(\"update task\", currTask);\r\n\r\n                console.log('currChat&&&&\\n', currTask);\r\n                setChats(currTask.chat);\r\n            } else {\r\n                setToTask(true)\r\n                return;\r\n            }\r\n\r\n            /**\r\n             * \r\n             * now we have the userID, now we need to bring the name with another request to DB\r\n             * \r\n             */\r\n        }\r\n\r\n        getCurrTask();\r\n\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n            console.log('inside unMount!');\r\n            \r\n            socket.emit('disconnect');\r\n        }\r\n    })\r\n\r\n    //every time chats state changed, we send to the server the updated state, when user disconnect the updated state of chat will be at the server\r\n    useEffect(() => {\r\n        // console.log('chat been changed\\n');\r\n        socket.emit('update chat', chats);\r\n\r\n    }, [chats])\r\n\r\n\r\n    if (!socket) {\r\n        socket = io(':3000');\r\n        socket.on('chat message', function (message, from) {\r\n            setChats(prevChats => ([\r\n                ...prevChats, {\r\n                    from: from,\r\n                    message: message\r\n                }])\r\n            )\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <CTX.Provider value={{ user, chats, sendChatAction }}>\r\n            {toTask ? <Redirect to=\"/\"/> : null}\r\n            {props.children}\r\n\r\n            {/* {console.log('props.children',props.children)} */}\r\n        </CTX.Provider>\r\n    )\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { CTX } from \"./store\"\r\nimport { blue } from '@material-ui/core/colors';\r\n// import urlGoogle  from '../server/google-util';\r\nimport Link from '@material-ui/core/Link';\r\n// const urlGoogle = require('../server/google-util');\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        '& > *': {\r\n            padding: theme.spacing(3, 2)\r\n        },\r\n    },\r\n\r\n    flex: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    topicWindow: {\r\n        width: '30%',\r\n        height: '300px',\r\n        borderRight: '1px solid grey'\r\n    },\r\n    chatWindow: {\r\n        width: '70%',\r\n        height: '300px',\r\n        padding: \"20px\"\r\n    },\r\n    chatBox: {\r\n        width: '85%'\r\n    },\r\n    button: {\r\n        width: '15%'\r\n    },\r\n}));\r\n\r\n\r\n// every time we type, we change the state via ChangeTextValue, and because of that we reRender the component and will see all things be4 the return ? ? \r\nexport default function Dashboard() {\r\n \r\n\r\n    const classes = useStyles();\r\n    \r\n\r\n\r\n    // CTX store\r\n    const { user, chats, sendChatAction } = React.useContext(CTX);\r\n    // const topics = Object.keys(allChats);\r\n    // console.log(allChats);\r\n\r\n    // console.log(allChats);\r\n    //local state\r\n    //the current state    //call it, will change to current state \r\n    const [textValue, changeTextValue] = React.useState('');\r\n    // const [activeTopic, chageActiveTopic] = React.useState(topics[0]);\r\n\r\n\r\n    return (\r\n        <div >\r\n            <Paper variant=\"outlined\" className={classes.root} >\r\n\r\n                <Typography variant=\"h4\" component=\"h4\">Chat app\r\n                    {/* <Typography variant=\"h5\" component=\"h5\"> {activeTopic} </Typography> */}\r\n                </Typography>\r\n\r\n\r\n\r\n                {/*  */}\r\n                <div className={classes.flex}>\r\n                    {/* <div className={classes.topicWindow}>\r\n                        <List>\r\n                            {\r\n                                topics.map(topic => (\r\n                                    <ListItem onClick={() => { chageActiveTopic(topic) }} key={topic} button>\r\n                                        <ListItemText primary={topic} />\r\n                                    </ListItem>\r\n\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    </div> */}\r\n                    {/* <div className={classes.chatWindow}>\r\n                        {\r\n                            allChats[activeTopic].map((chat, i) => (\r\n                                \r\n                                <div className={classes.flex} key={i}>\r\n                                    <Chip label={chat.from} style={chat.from === user ? { backgroundColor: 'blue' } : { backgroundColor: 'grey' }} />\r\n                                    <Typography variant='body1' gutterBottom style={{ paddingLeft: \"8px\" }}> {chat.msg} </Typography>\r\n                                </div>\r\n\r\n                            ))\r\n                        }\r\n                    </div> */}\r\n\r\n\r\n                    <div className={classes.chatWindow}>\r\n                        {\r\n                            chats.map((chat, i) => (\r\n                                \r\n                                \r\n                                <div className={classes.flex} key={i}>\r\n                                    {/* {console.log('one chat at deshboard\\n',chat)} */}\r\n                                    <Chip label={chat.from} style={chat.from === user ? { backgroundColor: '#5c6bc0' } : { backgroundColor: '#7e57c2' }} />\r\n                                    <Typography variant='body1' gutterBottom style={{ paddingLeft: \"8px\" }}> {chat.message} </Typography>\r\n                                </div>\r\n\r\n                            ))\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                <div className={classes.flex}>\r\n                    <TextField\r\n                        label=\"send a chat\"\r\n                        className={classes.chatBox}\r\n                        helperText=\"💻 🎆🎆¯\\(°_o)/¯\"\r\n                        value={textValue}\r\n                        onChange={e => {\r\n                            changeTextValue(e.target.value);\r\n                            // console.log('e.target.value ' + e.target.value); console.log('textValue ' + textValue)\r\n                        }}\r\n                    />\r\n                    <Button variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        onClick={() => {\r\n                            sendChatAction({ from: user, message: textValue},chats)\r\n                            changeTextValue('');\r\n                        }}\r\n\r\n                    >\r\n                        SEND\r\n                    </Button>\r\n                </div>\r\n            </Paper>\r\n\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport Store from \"./store\";\r\nimport Dashboard from \"./dashboard\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n        },\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n\r\n    navLinks: {\r\n        textDecorationLine: 'none',\r\n        // padding: 20\r\n    }\r\n}));\r\n\r\n\r\nfunction ResponsiveDrawer(props) {\r\n    const { container } = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n\r\n\r\n    const drawer = (\r\n        <div>\r\n            {/* {console.log('propsChildren', props.children)} */}\r\n            <div className={classes.toolbar} />\r\n            <Divider />\r\n            <List>\r\n                {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                    <ListItem button key={text} >\r\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon>\r\n                        <NavLink exact to=\"/\" className = {classes.navLinks}>\r\n\r\n                        <ListItemText primary={text}/> \r\n                        </NavLink>\r\n                                                \r\n\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                    <ListItem button key={text}>\r\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                        <ListItemText primary={text} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n\r\n        <div className={classes.root}>\r\n\r\n            <CssBaseline />\r\n\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        Here4U POC\r\n          </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n                <Hidden smUp implementation=\"css\">\r\n                    <Drawer\r\n                        container={container}\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true, // Better open performance on mobile.\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation=\"css\">\r\n                    <Drawer\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n            <main className={classes.content}>\r\n\r\n                <div className={classes.toolbar} />\r\n                <Typography paragraph>\r\n                    Welcome\r\n        </Typography>\r\n                {props.children}\r\n            </main>\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n    container: PropTypes.instanceOf(typeof Element === 'undefined' ? Object : Element),\r\n};\r\n\r\nexport default ResponsiveDrawer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport Store from \"./store\";\r\nimport Dashboard from \"./dashboard\";\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n// import { queryRes } from \"./task\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    chatStyle: {\r\n        height: '1%',\r\n    }\r\n}));\r\n\r\nconst Chat = (props) => {\r\n    // const res = React.useContext(queryRes);\r\n    // console.log('x!!', res);\r\n\r\n    return (\r\n        // <React.Fragment>\r\n        <div className={useStyles.chatStyle}>\r\n            \r\n            <Store tasks = {props.allTasks}>\r\n            {/* {console.log('props.blabla',props.blabla)} */}\r\n                <Dashboard/>\r\n            </Store>\r\n        </div>\r\n        // </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Route } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ResponsoveDrawer from \"./responsiveDrawer\";\r\nimport ChartBar from \"../Components/chartBar\";\r\nimport Chat from \"../Components/chat\";\r\nimport Task from \"../Components/task\";\r\nimport ComposeChart from '../Components/composed-chart';\r\n\r\n\r\n\r\n\r\nlet res;\r\nlet queryRes;\r\n\r\n\r\nconst MainWindow = props => {\r\n\r\n    // const [allTasks, setAllTasks] = React.useState([])\r\n\r\n    const [allUsersTasks, setAllUsersTasks] = React.useState([])\r\n\r\n    useEffect(() => {\r\n    \r\n        async function fetchChatDetails() {\r\n    \r\n    \r\n            try {\r\n                res = await fetch('http://localhost:3000/Help4U/task/getTasksByUID?userID=305171159').then(res => res.json())\r\n                // queryRes = React.createContext(res);\r\n                console.log('res MAIN WINDOW\\n', res);\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n    \r\n            if (res.status == 200 && res.data != null ) {\r\n    \r\n                // let tasks = res.data;\r\n                setAllUsersTasks(res.data)\r\n    \r\n            }\r\n        }\r\n    \r\n        fetchChatDetails();\r\n        console.log('useEffect of mainWIndow!');\r\n        \r\n    \r\n    }, []);\r\n\r\n    return (\r\n        <div >\r\n            <ResponsoveDrawer>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={8}   >\r\n\r\n                        <Route exact path=\"/\" component={() => <Task allTasks = {allUsersTasks} />} />\r\n                        <Route path=\"/chat\" component={() => <Chat allTasks={allUsersTasks} />} />\r\n                        {/* another option to show chart from Bit */}\r\n                        {/* <Route exact path=\"/\" component={ComposeChart}  /> */}\r\n\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        {/* another option to show chart from Bit */}\r\n                        <ComposeChart />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </ResponsoveDrawer>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default MainWindow;","import * as React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n  Chart,\r\n  BarSeries,\r\n  Title,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n} from '@devexpress/dx-react-chart-material-ui';\r\nimport { Animation } from '@devexpress/dx-react-chart';\r\n\r\nconst data = [\r\n  { year: '1950', population: 2.525 },\r\n  { year: '1960', population: 3.018 },\r\n  { year: '1970', population: 3.682 },\r\n  { year: '1980', population: 4.440 },\r\n  { year: '1990', population: 5.310 },\r\n  { year: '2000', population: 6.127 },\r\n  { year: '2010', population: 6.930 },\r\n];\r\n\r\nexport default class Demo extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { data: chartData } = this.state;\r\n\r\n    return (\r\n      <Paper>\r\n        <Chart\r\n          data={chartData}\r\n        >\r\n          <ArgumentAxis />\r\n          <ValueAxis max={7} />\r\n\r\n          <BarSeries\r\n            valueField=\"population\"\r\n            argumentField=\"year\"\r\n          />\r\n          <Title text=\"World population\" />\r\n          <Animation />\r\n        </Chart>\r\n      </Paper>\r\n    );\r\n  }\r\n}","import React, { PureComponent } from 'react';\r\nimport ComposedChart from '@bit/recharts.recharts.composed-chart';\r\nimport Line from '@bit/recharts.recharts.line';\r\n// import Area from '@bit/recharts.recharts.area';\r\nimport Bar from '@bit/recharts.recharts.bar';\r\nimport XAxis from '@bit/recharts.recharts.x-axis';\r\nimport YAxis from '@bit/recharts.recharts.y-axis';\r\n// import CartesianGrid from '@bit/recharts.recharts.cartesian-grid';\r\nimport Tooltip from '@bit/recharts.recharts.tooltip';\r\nimport Legend from '@bit/recharts.recharts.legend';\r\n \r\nconst data = [\r\n\t{\r\n\t\tname: 'Page A', uv: 590, pv: 800, amt: 1400,\r\n\t},\r\n\t{\r\n\t\tname: 'Page B', uv: 868, pv: 967, amt: 1506,\r\n\t},\r\n\t{\r\n\t\tname: 'Page C', uv: 1397, pv: 1098, amt: 989,\r\n\t},\r\n\t{\r\n\t\tname: 'Page D', uv: 1480, pv: 1200, amt: 1228,\r\n\t},\r\n\t{\r\n\t\tname: 'Page E', uv: 1520, pv: 1108, amt: 1100,\r\n\t},\r\n\t{\r\n\t\tname: 'Page F', uv: 1400, pv: 680, amt: 1700,\r\n\t},\r\n];\r\n\r\nexport default class Example extends PureComponent {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ComposedChart\r\n\t\t\t\twidth={500}\r\n\t\t\t\theight={400}\r\n\t\t\t\tdata={data}\r\n\t\t\t\tmargin={{\r\n\t\t\t\t\ttop: 20, right: 20, bottom: 20, left: 20,\r\n                }}\r\n                \r\n\t\t\t>\r\n\t\t\t\t{/* <CartesianGrid stroke=\"#f5f5f5\" /> */}\r\n\t\t\t\t<XAxis dataKey=\"name\" />\r\n\t\t\t\t<YAxis />\r\n\t\t\t\t<Tooltip />\r\n\t\t\t\t<Legend />\r\n\t\t\t\t<Bar dataKey=\"uv\" barSize={20} fill=\"#413ea0\" />\r\n\t\t\t\t<Line type=\"monotone\" dataKey=\"uv\" stroke=\"#ff7300\" />\r\n\t\t\t</ComposedChart>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\r\nimport { Route } from \"react-router-dom\";\r\nimport Chat from \"../Components/chat\";\r\nimport MainWindow from \"../Components/mainWindow\";\r\n// import ChartBar from \"../Components/chartBar\";\r\n\r\nconst ReactRouter = () => {\r\n    \r\n    return (\r\n            <MainWindow>\r\n            </MainWindow>\r\n    )\r\n}\r\n\r\nexport default ReactRouter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport ReactRouter from '../src/Routers/routers'\n\n\nReactDOM.render(\n\n<Router>\n    <ReactRouter/>\n</Router>\n\n    \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}